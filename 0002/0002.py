import sys

"""
Even Fibonacci numbers
Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.

---

Intuition:

- We can generate new Fibonaccis iteratively by only keeping track of the last
two Fibonacci numbers.
- Note that Fibonaccis follow an (odd, odd, even) repeating pattern (since
odd + odd = even and odd + even = odd), so we only care about every third
Fibonacci.
"""

N = 4000000

def next_even_fib(first, second):
  """
  Given the first and second seed Fibonacci numbers in the series, yield the
  next even Fibonacci number.
  """
  prev, current = first, second

  while current < N:
    yield current

    # only care about every 3rd Fibonacci
    for i in range(3):
      next = prev + current
      prev = current
      current = next


def main(argv=None):
  if argv is None:
    argv = sys.argv

  print sum(next_even_fib(1, 2))


if __name__ == '__main__':
  sys.exit(main())
